exports["joystickInterface_getButtonsStatus"] = Napi::Function::New(env, joystickInterface_getButtonsStatus, "joystickInterface_getButtonsStatus");
exports["joystickInterface_isPresent"] = Napi::Function::New(env, joystickInterface_isPresent, "joystickInterface_isPresent");
exports["joystickInterface_getAxes"] = Napi::Function::New(env, joystickInterface_getAxes, "joystickInterface_getAxes");
exports["keyboardInterface_isKeyDown"] = Napi::Function::New(env, keyboardInterface_isKeyDown, "keyboardInterface_isKeyDown");
exports["mouseInterface_setCursorMode"] = Napi::Function::New(env, mouseInterface_setCursorMode, "mouseInterface_setCursorMode");
exports["mouseInterface_isButtonPressed"] = Napi::Function::New(env, mouseInterface_isButtonPressed, "mouseInterface_isButtonPressed");
exports["attachmentInterface_getImage"] = Napi::Function::New(env, attachmentInterface_getImage, "attachmentInterface_getImage");
exports["attachmentInterface_getBlending"] = Napi::Function::New(env, attachmentInterface_getBlending, "attachmentInterface_getBlending");
exports["attachmentInterface_isCleared"] = Napi::Function::New(env, attachmentInterface_isCleared, "attachmentInterface_isCleared");
exports["bufferFactoryInterface_build"] = Napi::Function::New(env, bufferFactoryInterface_build, "bufferFactoryInterface_build");
exports["computeStageFactoryInterface_build"] = Napi::Function::New(env, computeStageFactoryInterface_build, "computeStageFactoryInterface_build");
exports["computeStageInterface_beginRecording"] = Napi::Function::New(env, computeStageInterface_beginRecording, "computeStageInterface_beginRecording");
exports["computeStageInterface_endRecording"] = Napi::Function::New(env, computeStageInterface_endRecording, "computeStageInterface_endRecording");
exports["computeStageInterface_dispatch"] = Napi::Function::New(env, computeStageInterface_dispatch, "computeStageInterface_dispatch");
exports["computeStageInterface_submit"] = Napi::Function::New(env, computeStageInterface_submit, "computeStageInterface_submit");
exports["computeStageInterface_submitNoSemaphores"] = Napi::Function::New(env, computeStageInterface_submitNoSemaphores, "computeStageInterface_submitNoSemaphores");
exports["computeStageInterface_getSignalSemaphore"] = Napi::Function::New(env, computeStageInterface_getSignalSemaphore, "computeStageInterface_getSignalSemaphore");
exports["descriptorSetInterface_bindImageViewSampler"] = Napi::Function::New(env, descriptorSetInterface_bindImageViewSampler, "descriptorSetInterface_bindImageViewSampler");
exports["descriptorSetInterface_bindImageStorage"] = Napi::Function::New(env, descriptorSetInterface_bindImageStorage, "descriptorSetInterface_bindImageStorage");
exports["descriptorSetInterface_bindBuffer"] = Napi::Function::New(env, descriptorSetInterface_bindBuffer, "descriptorSetInterface_bindBuffer");
exports["descriptorSetLayoutFactoryInterface_build"] = Napi::Function::New(env, descriptorSetLayoutFactoryInterface_build, "descriptorSetLayoutFactoryInterface_build");
exports["descriptorSetLayoutInterface_addField"] = Napi::Function::New(env, descriptorSetLayoutInterface_addField, "descriptorSetLayoutInterface_addField");
exports["descriptorSetLayoutInterface_generateDescriptorSet"] = Napi::Function::New(env, descriptorSetLayoutInterface_generateDescriptorSet, "descriptorSetLayoutInterface_generateDescriptorSet");
exports["genericBufferInterface_unmap"] = Napi::Function::New(env, genericBufferInterface_unmap, "genericBufferInterface_unmap");
exports["genericBufferInterface_getSize"] = Napi::Function::New(env, genericBufferInterface_getSize, "genericBufferInterface_getSize");
exports["genericBufferInterface_getType"] = Napi::Function::New(env, genericBufferInterface_getType, "genericBufferInterface_getType");
exports["imageFactoryInterface_build"] = Napi::Function::New(env, imageFactoryInterface_build, "imageFactoryInterface_build");
exports["imageFactoryInterface_buildMipmapped"] = Napi::Function::New(env, imageFactoryInterface_buildMipmapped, "imageFactoryInterface_buildMipmapped");
exports["imageFactoryInterface_loadFromFile"] = Napi::Function::New(env, imageFactoryInterface_loadFromFile, "imageFactoryInterface_loadFromFile");
exports["imageFactoryInterface_createFromExistingData"] = Napi::Function::New(env, imageFactoryInterface_createFromExistingData, "imageFactoryInterface_createFromExistingData");
exports["imageFactoryInterface_resolveIsDepthBuffer"] = Napi::Function::New(env, imageFactoryInterface_resolveIsDepthBuffer, "imageFactoryInterface_resolveIsDepthBuffer");
exports["imageInterface_getAttachment"] = Napi::Function::New(env, imageInterface_getAttachment, "imageInterface_getAttachment");
exports["imageInterface_isDepthBuffer"] = Napi::Function::New(env, imageInterface_isDepthBuffer, "imageInterface_isDepthBuffer");
exports["imageInterface_regenerateMipmaps"] = Napi::Function::New(env, imageInterface_regenerateMipmaps, "imageInterface_regenerateMipmaps");
exports["object3dInfoFactoryInterface_loadFromFile"] = Napi::Function::New(env, object3dInfoFactoryInterface_loadFromFile, "object3dInfoFactoryInterface_loadFromFile");
exports["object3dInfoFactoryInterface_loadFromArray"] = Napi::Function::New(env, object3dInfoFactoryInterface_loadFromArray, "object3dInfoFactoryInterface_loadFromArray");
exports["object3dInfoFactoryInterface_getFullScreenQuad"] = Napi::Function::New(env, object3dInfoFactoryInterface_getFullScreenQuad, "object3dInfoFactoryInterface_getFullScreenQuad");
exports["renderStageFactoryInterface_build"] = Napi::Function::New(env, renderStageFactoryInterface_build, "renderStageFactoryInterface_build");
exports["renderStageInterface_beginDrawing"] = Napi::Function::New(env, renderStageInterface_beginDrawing, "renderStageInterface_beginDrawing");
exports["renderStageInterface_endDrawing"] = Napi::Function::New(env, renderStageInterface_endDrawing, "renderStageInterface_endDrawing");
exports["renderStageInterface_setSets"] = Napi::Function::New(env, renderStageInterface_setSets, "renderStageInterface_setSets");
exports["renderStageInterface_setSet"] = Napi::Function::New(env, renderStageInterface_setSet, "renderStageInterface_setSet");
exports["renderStageInterface_drawMesh"] = Napi::Function::New(env, renderStageInterface_drawMesh, "renderStageInterface_drawMesh");
exports["renderStageInterface_submit"] = Napi::Function::New(env, renderStageInterface_submit, "renderStageInterface_submit");
exports["renderStageInterface_submitNoSemaphores"] = Napi::Function::New(env, renderStageInterface_submitNoSemaphores, "renderStageInterface_submitNoSemaphores");
exports["renderStageInterface_copy"] = Napi::Function::New(env, renderStageInterface_copy, "renderStageInterface_copy");
exports["renderStageInterface_copyWithNewOutput"] = Napi::Function::New(env, renderStageInterface_copyWithNewOutput, "renderStageInterface_copyWithNewOutput");
exports["renderStageInterface_getSignalSemaphore"] = Napi::Function::New(env, renderStageInterface_getSignalSemaphore, "renderStageInterface_getSignalSemaphore");
exports["semaphoreFactoryInterface_build"] = Napi::Function::New(env, semaphoreFactoryInterface_build, "semaphoreFactoryInterface_build");
exports["shaderFactoryInterface_build"] = Napi::Function::New(env, shaderFactoryInterface_build, "shaderFactoryInterface_build");
exports["shaderModuleInterface_getType"] = Napi::Function::New(env, shaderModuleInterface_getType, "shaderModuleInterface_getType");
exports["swapChainOutputFactoryInterface_build"] = Napi::Function::New(env, swapChainOutputFactoryInterface_build, "swapChainOutputFactoryInterface_build");
exports["swapChainOutputInterface_beginDrawing"] = Napi::Function::New(env, swapChainOutputInterface_beginDrawing, "swapChainOutputInterface_beginDrawing");
exports["swapChainOutputInterface_endDrawing"] = Napi::Function::New(env, swapChainOutputInterface_endDrawing, "swapChainOutputInterface_endDrawing");
exports["swapChainOutputInterface_drawMesh"] = Napi::Function::New(env, swapChainOutputInterface_drawMesh, "swapChainOutputInterface_drawMesh");
exports["swapChainOutputInterface_submit"] = Napi::Function::New(env, swapChainOutputInterface_submit, "swapChainOutputInterface_submit");
exports["swapChainOutputInterface_getSignalSemaphores"] = Napi::Function::New(env, swapChainOutputInterface_getSignalSemaphores, "swapChainOutputInterface_getSignalSemaphores");
exports["toolkitInterface_shouldCloseWindow"] = Napi::Function::New(env, toolkitInterface_shouldCloseWindow, "toolkitInterface_shouldCloseWindow");
exports["toolkitInterface_poolEvents"] = Napi::Function::New(env, toolkitInterface_poolEvents, "toolkitInterface_poolEvents");
exports["toolkitInterface_getExecutionTime"] = Napi::Function::New(env, toolkitInterface_getExecutionTime, "toolkitInterface_getExecutionTime");
exports["toolkitInterface_getTotalAllocatedMemory"] = Napi::Function::New(env, toolkitInterface_getTotalAllocatedMemory, "toolkitInterface_getTotalAllocatedMemory");
exports["toolkitInterface_waitQueueIdle"] = Napi::Function::New(env, toolkitInterface_waitQueueIdle, "toolkitInterface_waitQueueIdle");
exports["toolkitInterface_waitDeviceIdle"] = Napi::Function::New(env, toolkitInterface_waitDeviceIdle, "toolkitInterface_waitDeviceIdle");
exports["toolkitInterface_getObject3dInfoFactory"] = Napi::Function::New(env, toolkitInterface_getObject3dInfoFactory, "toolkitInterface_getObject3dInfoFactory");
exports["toolkitInterface_getShaderFactory"] = Napi::Function::New(env, toolkitInterface_getShaderFactory, "toolkitInterface_getShaderFactory");
exports["toolkitInterface_getDescriptorSetLayoutFactory"] = Napi::Function::New(env, toolkitInterface_getDescriptorSetLayoutFactory, "toolkitInterface_getDescriptorSetLayoutFactory");
exports["toolkitInterface_getRenderStageFactory"] = Napi::Function::New(env, toolkitInterface_getRenderStageFactory, "toolkitInterface_getRenderStageFactory");
exports["toolkitInterface_getComputeStageFactory"] = Napi::Function::New(env, toolkitInterface_getComputeStageFactory, "toolkitInterface_getComputeStageFactory");
exports["toolkitInterface_getBufferFactory"] = Napi::Function::New(env, toolkitInterface_getBufferFactory, "toolkitInterface_getBufferFactory");
exports["toolkitInterface_getImageFactory"] = Napi::Function::New(env, toolkitInterface_getImageFactory, "toolkitInterface_getImageFactory");
exports["toolkitInterface_getSwapChainOutputFactory"] = Napi::Function::New(env, toolkitInterface_getSwapChainOutputFactory, "toolkitInterface_getSwapChainOutputFactory");
exports["toolkitInterface_getSemaphoreFactory"] = Napi::Function::New(env, toolkitInterface_getSemaphoreFactory, "toolkitInterface_getSemaphoreFactory");
exports["toolkitInterface_getKeyboard"] = Napi::Function::New(env, toolkitInterface_getKeyboard, "toolkitInterface_getKeyboard");
exports["toolkitInterface_getMouse"] = Napi::Function::New(env, toolkitInterface_getMouse, "toolkitInterface_getMouse");
exports["toolkitInterface_getJoystick"] = Napi::Function::New(env, toolkitInterface_getJoystick, "toolkitInterface_getJoystick");
exports["toolkitInterface_getMedia"] = Napi::Function::New(env, toolkitInterface_getMedia, "toolkitInterface_getMedia");
exports["genericBufferInterface_map"] = Napi::Function::New(env, genericBufferInterface_map, "genericBufferInterface_map");
exports["toolkitInterface_new_window"] = Napi::Function::New(env, toolkitInterface_new_window, "toolkitInterface_new_window");
exports["toolkitInterface_new_headless"] = Napi::Function::New(env, toolkitInterface_new_headless, "toolkitInterface_new_headless");